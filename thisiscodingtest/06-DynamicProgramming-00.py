# 8-1.py 재귀함수로 구현한 피보나치 수열
def fibo(x):
    if x == 1 or x == 2:
        return 1
    else :
        return fibo(x-1) + fibo(x-2)

print(fibo(4))

# 그러나 위의 소스코드는 n이 커질수록 수행 시간이 기하 급수적으로 증가하는 문제가 발생
# O(N^2)의 지수 시간이 소요
# 동일한 함수가 반복적으로 호출되기 떄문

#############################################################

# 메모이제이션 : 한 번 구현한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
# 메모이제이션은 값을 저장하는 방법으로 캐싱(Cashing)이라고도 함
# 한 번 구한 정보를 리스트에 저장해서 구현 가능
# 때에 따라서 리스트가 아닌 다른 자료형을 이용할 수도 있음
# 사전 자료형은 수열처럼 연속적이지 않은 경우에 요융함

# 탑 다운 방식 : 재귀 함수를 이용하여 다이나믹 프로그래밍 소스 코드를 작성하는 방법.
# 큰 문제를 해결하기 위해 작은 문제를 호출한다는 의미

# 8-2.py 메모제이션과 탑다운 다이나믹 프로그래밍을 통해 구현한 피보나치 수열
# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    if x == 1 or x == 2: #종료 조건
        return 1
    if d[x] != 0 : #이미 계산한 적 있는 문제라면 그대로 반환
        return d[x]
    d[x] = fibo(x-1) + fibo(x-2) #계산하지 않은 문제라면 점화식으로 피보나치 수열 계산
    return d[x]

print(fibo(99))

# 시간 복잡도 : O(N)
# 8-3.py 호출되는 함수 확인
d = [0] * 100

def pibo(x):
    print(f"f({str(x)})", end = ' ')

    if x == 1 or x == 2: #종료 조건
        return 1
    if d[x] != 0 : #이미 계산한 적 있는 문제라면 그대로 반환
        return d[x]
    d[x] = pibo(x-1) + pibo(x-2) #계산하지 않은 문제라면 점화식으로 피보나치 수열 계산
    return d[x]

pibo(6)
#############################################################
# 보텀 업 방식 : 반복문을 이용하여 소스코드를 작성하는 경우 
# 작은 문제부터 차근차근 답을 도출한다는 의미
# 다이나믹 프로그래밍의 전형적인 형태
# DP 테이블 - 보텀업 방식에서 사용되는 결과 저장용 리스트

# 8-4.py
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])

#############################################################

# 퀵 정렬 vs 다이나믹 프로그래밍
# 다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제는 한 번만 풀어서 정답 도출
# 퀵 정렬도 마찬가지로 정렬을 수행할 때 정렬할 리스트를 분할하며 전체적으로 정렬함 -> 분할 정복 알고리즘
# 다이나믹 프로그래밍과 분할 정복(ex 퀵 정렬)의 차이점은 다이나믹 프로그래밍은 문제들이 서로 영향을 미침



